# -*- coding: utf-8 -*-
"""ejercicio_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11d4tKphHuJhUdwUcl0K5WprC5fjLwbSa
"""

import math

class CalculosNumericos:


    @staticmethod
    def calcular_logaritmo_neperiano(valor):
        try:
            if valor > 0:
                resultado = math.log(valor)
                print(f"Resultado del logaritmo neperiano: {resultado}")
            else:
                # Lanza una excepción si el número no es positivo
                raise ArithmeticError("El valor debe ser un número positivo para calcular el logaritmo.")
        except ArithmeticError as e:
            print(f"Error: {e}")
        except ValueError:
            print("El valor debe ser numérico para calcular el logaritmo.")

    @staticmethod
    def calcular_raiz_cuadrada(valor):
        try:
            if valor > 0:
                resultado = math.sqrt(valor)
                print(f"Resultado de la raíz cuadrada: {resultado}")
            else:
                # Lanza una excepción si el número no es positivo
                raise ArithmeticError("El valor debe ser un número positivo para calcular la raíz cuadrada.")
        except ArithmeticError as e:
            print(f"Error: {e}")
        except ValueError:
            print("El valor debe ser numérico para calcular la raíz cuadrada.")


def main():

    try:
        valor = float(input("Ingrese un valor numérico: "))
        CalculosNumericos.calcular_logaritmo_neperiano(valor)
        CalculosNumericos.calcular_raiz_cuadrada(valor)
    except ValueError:
        print("Error: Debe ingresar un número válido.")


if __name__ == "__main__":
    main()

